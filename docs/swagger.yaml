definitions:
  models.CodeEnvItem:
    properties:
      JupyterUrl:
        type: string
      codePath:
        type: string
      createTime:
        type: string
      desc:
        type: string
      deviceNum:
        type: integer
      deviceType:
        type: string
      engine:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
    required:
    - engine
    - name
    - status
    type: object
  models.Dataset:
    properties:
      createdAt:
        $ref: '#/definitions/models.UnixTime'
      creator:
        type: string
      deletedAt:
        $ref: '#/definitions/models.UnixTime'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      path:
        type: string
      size:
        type: integer
      status:
        type: string
      updatedAt:
        $ref: '#/definitions/models.UnixTime'
      version:
        type: string
    type: object
  models.DeviceItem:
    properties:
      avail:
        type: integer
      deviceType:
        type: string
    type: object
  models.EndpointWrapper:
    properties:
      accessPoint:
        type: string
      name:
        type: string
      status:
        type: string
    type: object
  models.JobLog:
    properties:
      cursor:
        type: string
      log:
        type: string
    type: object
  models.Modelset:
    properties:
      createdAt:
        $ref: '#/definitions/models.UnixTime'
      creator:
        type: string
      deletedAt:
        $ref: '#/definitions/models.UnixTime'
      description:
        type: string
      id:
        type: integer
      jobId:
        type: string
      name:
        type: string
      path:
        type: string
      size:
        type: integer
      status:
        type: string
      type:
        type: string
      updatedAt:
        $ref: '#/definitions/models.UnixTime'
      version:
        type: string
    type: object
  models.Training:
    properties:
      codePath:
        type: string
      createTime:
        type: string
      datasetPath:
        type: string
      desc:
        type: string
      deviceNum:
        type: integer
      deviceType:
        type: string
      engine:
        type: string
      id:
        type: string
      name:
        type: string
      outputPath:
        type: string
      params:
        additionalProperties:
          type: string
        type: object
      startupFile:
        type: string
      status:
        type: string
    type: object
  models.UnixTime:
    properties:
      time.Time:
        type: string
    type: object
  routers.APIException:
    properties:
      code:
        type: integer
      msg:
        type: string
    type: object
  routers.APISuccessResp:
    properties:
      code:
        type: integer
      data:
        type: object
      msg:
        type: string
    type: object
  routers.APISuccessRespAllGetCodeEnv:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.GetAllCodeEnvRsp'
      msg:
        type: string
    type: object
  routers.APISuccessRespCreateCodeEnv:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.CreateCodeEnvRsp'
      msg:
        type: string
    type: object
  routers.APISuccessRespCreateTraining:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.CreateTrainingRsp'
      msg:
        type: string
    type: object
  routers.APISuccessRespDeleteCodeEnv:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.DeleteCodeEnvRsp'
      msg:
        type: string
    type: object
  routers.APISuccessRespDeleteTraining:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.DeleteTrainingRsp'
      msg:
        type: string
    type: object
  routers.APISuccessRespGetAllTraining:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.GetAllTrainingRsp'
      msg:
        type: string
    type: object
  routers.APISuccessRespGetCodeEnvJupyter:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/models.EndpointWrapper'
      msg:
        type: string
    type: object
  routers.APISuccessRespGetDataset:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.GetDatasetResp'
      msg:
        type: string
    type: object
  routers.APISuccessRespGetDatasets:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.GetDatasetsResp'
      msg:
        type: string
    type: object
  routers.APISuccessRespGetModelset:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.GetModelsetResp'
      msg:
        type: string
    type: object
  routers.APISuccessRespGetModelsets:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.GetModelsetsResp'
      msg:
        type: string
    type: object
  routers.APISuccessRespGetResource:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.GetResourceRsp'
      msg:
        type: string
    type: object
  routers.APISuccessRespGetTraining:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/routers.GetTrainingRsp'
      msg:
        type: string
    type: object
  routers.APISuccessRespGetTrainingLog:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/models.JobLog'
      msg:
        type: string
    type: object
  routers.CreateCodeEnvReq:
    properties:
      codePath:
        type: string
      desc:
        type: string
      deviceNum:
        type: integer
      deviceType:
        type: string
      engine:
        type: string
      name:
        type: string
    required:
    - engine
    - name
    type: object
  routers.CreateCodeEnvRsp:
    properties:
      id:
        type: string
    type: object
  routers.CreateTrainingReq:
    properties:
      codePath:
        type: string
      createTime:
        type: string
      datasetPath:
        type: string
      desc:
        type: string
      deviceNum:
        type: integer
      deviceType:
        type: string
      engine:
        type: string
      id:
        type: string
      name:
        type: string
      outputPath:
        type: string
      params:
        additionalProperties:
          type: string
        type: object
      startupFile:
        type: string
      status:
        type: string
    type: object
  routers.CreateTrainingRsp:
    properties:
      id:
        type: string
    type: object
  routers.DeleteCodeEnvRsp:
    type: object
  routers.DeleteTrainingReq:
    properties:
      id:
        type: string
    type: object
  routers.DeleteTrainingRsp:
    type: object
  routers.GetAllCodeEnvRsp:
    properties:
      CodeEnvs:
        items:
          $ref: '#/definitions/models.CodeEnvItem'
        type: array
      total:
        type: integer
    type: object
  routers.GetAllTrainingRsp:
    properties:
      Trainings:
        items:
          $ref: '#/definitions/models.Training'
        type: array
      total:
        type: integer
    type: object
  routers.GetDatasetResp:
    properties:
      dataset:
        $ref: '#/definitions/models.Dataset'
    type: object
  routers.GetDatasetsResp:
    properties:
      datasets:
        items:
          $ref: '#/definitions/models.Dataset'
        type: array
      pageNum:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
      totalPage:
        type: integer
    type: object
  routers.GetModelsetResp:
    properties:
      model:
        $ref: '#/definitions/models.Modelset'
    type: object
  routers.GetModelsetsResp:
    properties:
      models:
        items:
          $ref: '#/definitions/models.Modelset'
        type: array
      pageNum:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
      totalPage:
        type: integer
    type: object
  routers.GetResourceRsp:
    properties:
      aiFrameworks:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      codePathPrefix:
        type: string
      deviceList:
        items:
          $ref: '#/definitions/models.DeviceItem'
        type: array
    type: object
  routers.GetTrainingReq:
    properties:
      id:
        type: string
    type: object
  routers.GetTrainingRsp:
    properties:
      codePath:
        type: string
      createTime:
        type: string
      datasetPath:
        type: string
      desc:
        type: string
      deviceNum:
        type: integer
      deviceType:
        type: string
      engine:
        type: string
      id:
        type: string
      name:
        type: string
      outputPath:
        type: string
      params:
        additionalProperties:
          type: string
        type: object
      startupFile:
        type: string
      status:
        type: string
    type: object
  routers.UploadFileResp:
    properties:
      path:
        type: string
    type: object
  routers.createDatasetReq:
    properties:
      description:
        type: string
      name:
        type: string
      path:
        type: string
    required:
    - description
    - name
    - path
    type: object
  routers.createModelsetReq:
    properties:
      description:
        type: string
      jobId:
        type: string
      name:
        type: string
      path:
        type: string
    required:
    - description
    - jobId
    - name
    - path
    type: object
info:
  contact: {}
  license: {}
paths:
  /ai_arts/api/codes:
    get:
      parameters:
      - description: page number
        in: query
        name: pageNum
        required: true
        type: integer
      - description: size per page
        in: query
        name: pageSize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespAllGetCodeEnv'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: get all codes
    post:
      parameters:
      - description: params
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/routers.CreateCodeEnvReq'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespCreateCodeEnv'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: create CodeEnv
  /ai_arts/api/codes/:id:
    delete:
      parameters:
      - description: codeEnv id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespDeleteCodeEnv'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: delete CodeEnv
  /ai_arts/api/codes/:id/jupyter:
    get:
      parameters:
      - description: code id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespGetCodeEnvJupyter'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: get CodeEnv jupyter path
  /ai_arts/api/common/resource:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespGetResource'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: get available resource
  /ai_arts/api/datasets:
    get:
      parameters:
      - description: page number, from 1
        in: query
        name: pageNum
        required: true
        type: integer
      - description: count per page
        in: query
        name: pageSize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespGetDatasets'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: list datasets
    post:
      parameters:
      - description: json body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/routers.createDatasetReq'
      - description: dataset description
        in: body
        name: description
        required: true
        schema:
          type: string
      - description: dataset storage path
        in: body
        name: path
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessResp'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: create dataset
  /ai_arts/api/datasets/:id:
    delete:
      parameters:
      - description: dataset id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessResp'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: delete dataset by id
    get:
      parameters:
      - description: dataset id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespGetDataset'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: get dataset by id
    post:
      parameters:
      - description: dataset description
        in: path
        name: description
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessResp'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: update dataset
  /ai_arts/api/files/download/dataset/:id:
    get:
      parameters:
      - description: model id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessResp'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: download dataset by id
  /ai_arts/api/files/download/model/:id:
    get:
      parameters:
      - description: model id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessResp'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: download model by id
  /ai_arts/api/files/upload/dataset:
    post:
      parameters:
      - description: upload file key 'data'
        in: body
        name: data
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.UploadFileResp'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: upload dataset file
  /ai_arts/api/files/upload/model:
    post:
      parameters:
      - description: upload file key 'data'
        in: body
        name: data
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessResp'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: upload model file, not implemented yet
  /ai_arts/api/models:
    get:
      parameters:
      - description: page number, from 1
        in: query
        name: pageNum
        required: true
        type: integer
      - description: count per page
        in: query
        name: pageSize
        required: true
        type: integer
      - description: name of model
        in: query
        name: name
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespGetModelsets'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: list models
    post:
      parameters:
      - description: json body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/routers.createModelsetReq'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessResp'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: create model
  /ai_arts/api/models/:id:
    delete:
      parameters:
      - description: model id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessResp'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: delete model by id
    get:
      parameters:
      - description: model id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespGetModelset'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: get model by id
    post:
      parameters:
      - description: model description
        in: path
        name: description
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessResp'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: update model
  /ai_arts/api/trainings:
    get:
      parameters:
      - description: page number
        in: query
        name: pageNum
        required: true
        type: integer
      - description: size per page
        in: query
        name: pageSize
        required: true
        type: integer
      - description: job status, 4=running
        in: query
        name: JobStatus
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespGetAllTraining'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: get all trainings
    post:
      parameters:
      - description: params
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/routers.CreateTrainingReq'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespCreateTraining'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: create Training
  /ai_arts/api/trainings/:id:
    delete:
      parameters:
      - description: params
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/routers.DeleteTrainingReq'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespDeleteTraining'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: delete one training
    get:
      parameters:
      - description: params
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/routers.GetTrainingReq'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespGetTraining'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: get specific training
  /ai_arts/api/trainings/log/:id:
    get:
      parameters:
      - description: params
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/routers.GetTrainingReq'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessRespGetTrainingLog'
        "400":
          description: error
          schema:
            $ref: '#/definitions/routers.APIException'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/routers.APIException'
      summary: get specific training
  /api/annotations/projects:
    get:
      description: get projects of data-platform
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/routers.APISuccessResp'
      summary: list projects
  /api/inferences:
    post:
      parameters:
      - description: Name
        in: query
        name: name
        required: true
        type: string
      - description: State
        in: query
        name: state
        type: integer
      - description: CreatedBy
        in: query
        name: created_by
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: sample
swagger: "2.0"
